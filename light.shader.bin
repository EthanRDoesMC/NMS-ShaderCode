[[FX]]

sampler gBufferMap = sampler_state
{
    Address = Clamp;
    TexUnit = 0;
};

sampler gBuffer1Map = sampler_state
{
    Address = Clamp;
    TexUnit = 1;
};

sampler gBuffer2Map = sampler_state
{
    Address = Clamp;
    TexUnit = 2;
};

sampler gBuffer3Map = sampler_state
{
    Address = Clamp;
    TexUnit = 3;
};

sampler gBuffer4Map = sampler_state
{
    Address = Clamp;
    TexUnit = 4;
};

sampler gBuffer5Map = sampler_state
{
    Address = Clamp;
    TexUnit = 5;
};

sampler gCausticMap = sampler_state
{
    Address = Wrap;
    TexUnit = 6;
};

sampler gCausticOffsetMap = sampler_state
{
    Address = Wrap;
    TexUnit = 7;
};

sampler gShadowMap = sampler_state
{
    TexUnit = 8;
};

sampler gCloudShadowMap = sampler_state
{
    TexUnit = 9;
};

sampler gDualPMapFront = sampler_state
{
    TexUnit = 10;
};

sampler gDualPMapBack = sampler_state
{
    TexUnit = 11;
};

sampler gLightCluster = sampler_state
{
    ImgUnit = 0;
};

sampler gLightCookiesMap = sampler_state
{
    Address = Clamp;
    TexUnit = 14;
};

sampler gLightVolNoise3D = sampler_state
{
    DefaultTexture  = SHADER/PERLINRED3D.DDS;
    SamplingOptions = On;
    Filter          = None;
    Address         = Wrap;
    TexUnit         = 15;
};


// -----------------------------------------------------------------------------------
// Uniforms
// -----------------------------------------------------------------------------------

// Planet

float4 gLightingHackParamsVec4          = {0.0, 0.0, 0.0, 0.0}; 
float4 gLightingHackParams2Vec4         = {0.0, 0.0, 0.0, 0.0}; 
float4 gLightingHackParams3Vec4         = {0.0, 0.0, 0.0, 0.0}; 

float4 gLightShaftParamsVec4;

float4 gPlanetPositionVec4              = {0.0, 0.0, 0.0, 0.0}; 
float4 gaPlanetPositionsVec4;
float4 gaPlanetColoursVec4;
float4 gLightOriginVec4                 = {0.0, 0.0, 0.0, 0.0}; 
float4 gInverseWorldUpMat4              = {0.0, 0.0, 0.0, 0.0};

// Lighting
float4 gMaterialSFXVec4                 = {0.0, 0.0, 0.0, 0.0};
float4 gMaterialSFXColVec4              = {0.0, 0.0, 0.0, 0.0};
float4 gDebugLightColourVec4            = {0.0, 0.0, 0.0, 0.0};
float4 gScreenSpaceShadowsParamsVec4    = {1.0, 0.0, 0.0, 0.0};

// Sky
float4 gSkyColourVec4                   = {1.0, 0.0, 1.0, 0.0};
float4 gHorizonColourVec4               = {1.0, 0.0, 1.0, 0.0};
float4 gSunColourVec4                   = {1.0, 0.0, 1.0, 0.0};
float4 gScatteringParamsVec4            = {1.0, 0.0, 1.0, 0.0};
float4 gSunPositionVec4                 = {1.0, 0.0, 1.0, 0.0};

float4 gSkyUpperColourVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gSkySolarColourVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gSkyGradientSpeedVec4            = {1.0, 0.0, 1.0, 0.0};
float4 gSkyUpperParamsVec4              = {1.0, 0.0, 1.0, 0.0};

// Fog
float4 gFogParamsVec4                   = {1.0, 0.0, 1.0, 0.0};
float4 gFogColourVec4                   = {1.0, 0.0, 1.0, 0.0};
float4 gHeightFogColourVec4             = {1.0, 0.0, 1.0, 0.0};
float4 gHeightFogParamsVec4             = {1.0, 0.0, 1.0, 0.0};

float4 gWaterFogColourNearVec4             = {1.0, 0.0, 1.0, 0.0};
float4 gWaterFogColourFarVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gWaterFogVec4                    = {1.0, 0.0, 1.0, 0.0};

// Space
float4 gSpaceHorizonColourVec4          = {1.0, 0.0, 1.0, 0.0};
float4 gFogFadeHeightsVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gFogFadeHeights2Vec4             = {1.0, 0.0, 1.0, 0.0};
float4 gFogFadeHeights3Vec4             = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceSkyColourVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceScatteringParamsVec4       = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceFogParamsVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceFogColourVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceFogColour2Vec4             = {1.0, 0.0, 1.0, 0.0};

float4 gSpaceSkyColour1Vec4             = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceSkyColour2Vec4             = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceSkyColour3Vec4             = {1.0, 0.0, 1.0, 0.0};

// Scan
float4 gScanParamsPosVec4               = {0.0, 0.0, 0.0, 0.0};
float4 gScanParamsCfg1Vec4              = {0.0, 0.0, 0.0, 0.0};
float4 gScanParamsCfg2Vec4              = {0.0, 0.0, 0.0, 0.0};
float4 gScanParamsCfg3Vec4              = {0.0, 0.0, 0.0, 0.0};

float4 gHueOverlayParamsVec4            = {1.0, 1.0, 1.0, 1.0};
float4 gSaturationOverlayParamsVec4     = {1.0, 1.0, 1.0, 1.0};
float4 gValueOverlayParamsVec4          = {1.0, 1.0, 1.0, 1.0};
float4 gLightTopColourVec4              = {1.0, 1.0, 1.0, 1.0};
float4 gRainParametersVec4              = {0.0, 0.0, 0.0, 0.0};

// -----------------------------------------------------------------------------------
// Contexts
// -----------------------------------------------------------------------------------

context SUNLIGHT
{
    VertexShader  = compile GLSL VS_SUNLIGHT;
    PixelShader   = compile GLSL FS_SUNLIGHT;
    ComputeShader = compile GLSL FS_SUNLIGHT;
}

context SUNLIGHT_SCAN
{
    VertexShader  = compile GLSL VS_SUNLIGHT;
    PixelShader   = compile GLSL FS_SUNLIGHT_SCAN;
    ComputeShader = compile GLSL FS_SUNLIGHT_SCAN;
}

context SUNLIGHT_SHADOW
{
    VertexShader  = compile GLSL VS_SUNLIGHT;
    PixelShader   = compile GLSL FS_SUNLIGHT_SHADOWED;
    ComputeShader = compile GLSL FS_SUNLIGHT_SHADOWED;
}

context SUNLIGHT_SHD_SCAN
{
    VertexShader  = compile GLSL VS_SUNLIGHT;
    PixelShader   = compile GLSL FS_SUNLIGHT_SHADOWED_SCAN;
    ComputeShader = compile GLSL FS_SUNLIGHT_SHADOWED_SCAN;
}

context SUNLIGHT_SPLIT
{
    VertexShader  = compile GLSL VS_SUNLIGHT;
    PixelShader   = compile GLSL FS_SUNLIGHT_SPLIT;
    ComputeShader = compile GLSL FS_SUNLIGHT_SPLIT;
}

context SUNLIGHT_SPLT_SCAN
{
    VertexShader  = compile GLSL VS_SUNLIGHT;
    PixelShader   = compile GLSL FS_SUNLIGHT_SPLIT_SCAN;
    ComputeShader = compile GLSL FS_SUNLIGHT_SPLIT_SCAN;
}

context SSS_MARCH_LOW
{
    VertexShader  = compile GLSL VS_IMVERTEX;
    PixelShader   = compile GLSL FS_SSS_MARCH_LOW;
    ComputeShader = compile GLSL FS_SSS_MARCH_LOW;
}

context SSS_MARCH_MID
{
    VertexShader  = compile GLSL VS_IMVERTEX;
    PixelShader   = compile GLSL FS_SSS_MARCH_MID;
    ComputeShader = compile GLSL FS_SSS_MARCH_MID;
}

context SSS_MARCH_HIGH
{
    VertexShader  = compile GLSL VS_IMVERTEX;
    PixelShader   = compile GLSL FS_SSS_MARCH_HIGH;
    ComputeShader = compile GLSL FS_SSS_MARCH_HIGH;
}

context SSS_TEMPORAL
{
    VertexShader  = compile GLSL VS_IMVERTEX;
    PixelShader   = compile GLSL FS_SSS_TEMPORAL;
    ComputeShader = compile GLSL FS_SSS_TEMPORAL;
}

context SHADOW_APPLY
{
    VertexShader  = compile GLSL VS_SUNLIGHT;
    PixelShader   = compile GLSL FS_SHADOW_APPLY;
    ComputeShader = compile GLSL FS_SHADOW_APPLY;
}

context SUNLIGHT_TERRAIN
{
    VertexShader = compile GLSL VS_SUNLIGHT;
    PixelShader  = compile GLSL FS_SUNLIGHT_TERRAIN;
}

context SPOTLIGHT_INNER
{
    VertexShader = compile GLSL VS_POS_NOLOGZ;
    PixelShader  = compile GLSL FS_SPOTLIGHT_INNER;
}

context SPOTLIGHT_OUTER
{
    VertexShader = compile GLSL VS_POS;
    PixelShader = compile GLSL FS_SPOTLIGHT_OUTER;
}

context SPOTLIGHT_SHAPE
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_SHAPE;
}

context SPOT_MULTI
{
    VertexShader = compile GLSL VS_IMVERTEX_MULTI;
    PixelShader  = compile GLSL FS_SPOTLIGHT_MULTI;
}

//TF_BEGIN
context [ IOS ] TILE_LIGHTS
{
	VertexShader = compile GLSL VS_IMVERTEX_TILE_LIGHTS;
	PixelShader = compile GLSL FS_TILE_LIGHTS;
	//ComputeShader = compile GLSL FS_TILE_LIGHTS;
}

context [ MACOS ] TILE_LIGHTS
{
    VertexShader = compile GLSL VS_IMVERTEX_TILE_LIGHTS;
    PixelShader = compile GLSL FS_TILE_LIGHTS;
}

context [ IOS ] TILE_LIGHTS_COUNT_DEBUG
{
	VertexShader = compile GLSL VS_IMVERTEX_TILE_LIGHTS;
	PixelShader = compile GLSL FS_TILE_LIGHTS_COUNT_DEBUG;
	//ComputeShader = compile GLSL FS_TILE_LIGHTS_DEBUG;
}

context [ MACOS ] TILE_LIGHTS_COUNT_DEBUG
{
    VertexShader = compile GLSL VS_IMVERTEX_TILE_LIGHTS;
    PixelShader = compile GLSL FS_TILE_LIGHTS_COUNT_DEBUG;
}

context [ IOS ] TILE_LIGHTS_CLUSTER_DEBUG
{
	VertexShader = compile GLSL VS_IMVERTEX_TILE_LIGHTS;
	PixelShader = compile GLSL FS_TILE_LIGHTS_CLUSTER_DEBUG;
	//ComputeShader = compile GLSL FS_TILE_LIGHTS_DEBUG;
}

context [ MACOS ] TILE_LIGHTS_CLUSTER_DEBUG
{
    VertexShader = compile GLSL VS_IMVERTEX_TILE_LIGHTS;
    PixelShader = compile GLSL FS_TILE_LIGHTS_CLUSTER_DEBUG;
}

//TF_END

context SPOT_TILE_VIS
{
    VertexShader = compile GLSL VS_IMVERTEX_TILE_VIS;
    PixelShader = compile GLSL FS_SPOTLIGHT_TILE_VIS;
}

context SPOT_INNER_LIST
{
    VertexShader = compile GLSL VS_POS_NOLOGZ;
    PixelShader  = compile GLSL FS_SPOTLIGHT_INNER_LIST;
}

context SPOT_OUTER_LIST
{
    VertexShader = compile GLSL VS_POS;
    PixelShader = compile GLSL FS_SPOTLIGHT_OUTER_LIST;
}

context NULL
{
    VertexShader = compile GLSL VS_IMVERTEX;
    PixelShader  = compile GLSL FS_NULL;
}

context RAYMARCH
{
	VertexShader  = compile GLSL VS_IMVERTEX;
	PixelShader   = compile GLSL FS_RAYMARCH;
	ComputeShader = compile GLSL FS_RAYMARCH;
}

context SCATTERING
{
    VertexShader  = compile GLSL VS_IMVERTDEPTH;
    PixelShader   = compile GLSL FS_SCATTERING;
    ComputeShader = compile GLSL FS_SCATTERING;
}

context [ PC ] SCATTERING_CB
{
    VertexShader  = compile GLSL VS_IMVERTDEPTH_CB;
    PixelShader   = compile GLSL FS_SCATTERING_CB;

    ShadingRate   = true;
}

context [ SWITCH ] SCATTERING_CB
{
    VertexShader  = compile GLSL VS_IMVERTDEPTH_CB;
    PixelShader   = compile GLSL FS_SCATTERING_CB;

    ShadingRate   = true;
}

context SCATTERING_NOGR
{
    VertexShader  = compile GLSL VS_IMVERTDEPTH;
    PixelShader   = compile GLSL FS_SCATTERING_NOGR;
    ComputeShader = compile GLSL FS_SCATTERING_NOGR;
}

context SPOT_K_VOL_OUT
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_CONSTANT_VOLUME_OUT;
}

context SPOT_K_VOL_IN
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_CONSTANT_VOLUME_IN;
}

context SPOT_L_VOL_OUT
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_LINEAR_VOLUME_OUT;
}

context SPOT_L_VOL_IN
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_LINEAR_VOLUME_IN;
}

context SPOT_R_VOL_OUT
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_LINEAR_SQRT_VOLUME_OUT;
}

context SPOT_R_VOL_IN
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_LINEAR_SQRT_VOLUME_IN;
}

context SPOT_Q_VOL_OUT
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_QUADRATIC_VOLUME_OUT;
}

context SPOT_Q_VOL_IN
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_QUADRATIC_VOLUME_IN;
}

context SPOT_C_VOL_OUT
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_CUBIC_VOLUME_OUT;
}

context SPOT_C_VOL_IN
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_CUBIC_VOLUME_IN;
}

context SPOT_E_VOL_OUT
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_CUSTOM_VOLUME_OUT;
}

context SPOT_E_VOL_IN
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_SPOTLIGHT_CUSTOM_VOLUME_IN;
}

context POINT_K_VOL_OUT
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_POINTLIGHT_CONSTANT_VOLUME_OUT;
}

context POINT_K_VOL_IN
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_POINTLIGHT_CONSTANT_VOLUME_IN;
}

context POINT_L_VOL_OUT
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_POINTLIGHT_LINEAR_VOLUME_OUT;
}

context POINT_L_VOL_IN
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_POINTLIGHT_LINEAR_VOLUME_IN;
}

context POINT_R_VOL_OUT
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_POINTLIGHT_LINEAR_SQRT_VOLUME_OUT;
}

context POINT_R_VOL_IN
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_POINTLIGHT_LINEAR_SQRT_VOLUME_IN;
}

context POINT_Q_VOL_OUT
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_POINTLIGHT_QUADRATIC_VOLUME_OUT;
}

context POINT_Q_VOL_IN
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_POINTLIGHT_QUADRATIC_VOLUME_IN;
}

context POINT_C_VOL_OUT
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_POINTLIGHT_CUBIC_VOLUME_OUT;
}

context POINT_C_VOL_IN
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_POINTLIGHT_CUBIC_VOLUME_IN;
}

context POINT_E_VOL_OUT
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_POINTLIGHT_CUSTOM_VOLUME_OUT;
}

context POINT_E_VOL_IN
{
    VertexShader    = compile GLSL VS_POS;
    PixelShader     = compile GLSL FS_POINTLIGHT_CUSTOM_VOLUME_IN;
}

[[VS_IMVERTEX]]
// =================================================================================================
#define D_TEX_QUAD
#define D_LIGHT
#include "ImmediateModeVertex.shader.h"

[[VS_IMVERTEX_MULTI]]
// =================================================================================================
#define D_TEX_QUAD
#define D_LIGHT
#define D_SPOTLIGHT_MULTI
#include "ImmediateModeVertex.shader.h"

[[VS_IMVERTEX_TILE_VIS]]
// =================================================================================================
#define D_TEX_QUAD
#define D_LIGHT
#define D_SPOTLIGHT
#define D_TILE_VIS
#include "ImmediateModeVertex.shader.h"

[[VS_IMVERTDEPTH]]
// =================================================================================================
#define D_TEX_QUAD_FRUSTUM
#define D_TEX_QUAD
#define D_LIGHT
#include "ImmediateModeVertex.shader.h"

[[VS_IMVERTDEPTH_CB]]
// =================================================================================================
#define D_TEX_QUAD_FRUSTUM
#define D_TEX_QUAD
#define D_LIGHT
#define D_CHECKERBOARD
#include "ImmediateModeVertex.shader.h"

[[VS_POS]]
// =================================================================================================
#define D_VERTEX
#define D_VERTEX_LOGZ
#define D_SPOTLIGHT
#include "LightFragment.shader.h"

[[VS_POS_NOLOGZ]]
// =================================================================================================
#define D_VERTEX
#define D_SPOTLIGHT
#include "LightFragment.shader.h"

[[VS_SUNLIGHT]]
// =================================================================================================
#define D_VERTEX_SUNLIGHT
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#include "LightFragment.shader.h"

[[VS_SSS]]
// =================================================================================================
#define D_VERTEX_SSS
#include "LightFragment.shader.h"

[[FS_SUNLIGHT]]
// =================================================================================================
#define D_LIGHT
#define D_SUNLIGHT
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define _F40_SUBSURFACE_MASK
#include "LightFragment.shader.h"

[[FS_SUNLIGHT_SCAN]]
// =================================================================================================
#define D_LIGHT
#define D_SUNLIGHT
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define D_SCAN
#define _F40_SUBSURFACE_MASK
#include "LightFragment.shader.h"

[[FS_SUNLIGHT_SHADOWED]]
// =================================================================================================
#define D_LIGHT
#define D_SUNLIGHT
#define D_SHADOWED
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define _F40_SUBSURFACE_MASK
#include "LightFragment.shader.h"

[[FS_SUNLIGHT_SHADOWED_SCAN]]
// =================================================================================================
#define D_LIGHT
#define D_SUNLIGHT
#define D_SHADOWED
#define D_SCAN
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define _F40_SUBSURFACE_MASK
#include "LightFragment.shader.h"

[[FS_SUNLIGHT_SPLIT]]
// =================================================================================================
#define D_LIGHT
#define D_SUNLIGHT
#define D_SPLIT_SHADOW
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define _F40_SUBSURFACE_MASK
#include "LightFragment.shader.h"

[[FS_SUNLIGHT_SPLIT_SCAN]]
// =================================================================================================
#define D_LIGHT
#define D_SUNLIGHT
#define D_SPLIT_SHADOW
#define D_SCAN
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define _F40_SUBSURFACE_MASK
#include "LightFragment.shader.h"

[[FS_SHADOW_APPLY]]
// =================================================================================================
#define D_SHADOW_APPLY
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define _F40_SUBSURFACE_MASK
#include "LightFragment.shader.h"

[[FS_SSS_MARCH_LOW]]
// =================================================================================================
#define D_SSS_MARCH
#define D_SSS_MARCH_LOW
#include "LightFragment.shader.h"

[[FS_SSS_MARCH_MID]]
// =================================================================================================
#define D_SSS_MARCH
#define D_SSS_MARCH_MID
#include "LightFragment.shader.h"

[[FS_SSS_MARCH_HIGH]]
// =================================================================================================
#define D_SSS_MARCH
#define D_SSS_MARCH_HIGH
#include "LightFragment.shader.h"

[[FS_SSS_TEMPORAL]]
// =================================================================================================
#define D_SSS_TEMPORAL
#include "LightFragment.shader.h"

[[FS_SUNLIGHT_TERRAIN]]
// =================================================================================================
#define D_LIGHT
#define D_LIGHT_TERRAIN
#define D_SUNLIGHT
#define D_SWITCH_NO_BINDLESS_SAMPLERS
#define _F40_SUBSURFACE_MASK
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_INNER]]
// =================================================================================================
#define D_LIGHT
#define D_SPOTLIGHT
#define D_SPOTLIGHT_INNER
#define _F40_SUBSURFACE_MASK
#define _F10_NORECEIVESHADOW
#define _F49_DISABLE_AMBIENT
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_OUTER]]
// =================================================================================================
#define D_LIGHT
#define D_SPOTLIGHT
#define D_SPOTLIGHT_OUTER
#define _F40_SUBSURFACE_MASK
#define _F10_NORECEIVESHADOW
#define _F49_DISABLE_AMBIENT
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_SHAPE]]
// =================================================================================================
#define D_LIGHT
#define D_SPOTLIGHT
#define D_LIGHT_SHAPE
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_MULTI]]
// =================================================================================================
#define D_LIGHT
#define D_SPOTLIGHT
#define D_SPOTLIGHT_INNER
#define D_SPOTLIGHT_MULTI
#define _F40_SUBSURFACE_MASK
#define _F10_NORECEIVESHADOW
#define _F49_DISABLE_AMBIENT
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_TILE_VIS]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_OUTER
#define D_TILE_VIS
#define _F40_SUBSURFACE_MASK
#define _F10_NORECEIVESHADOW
#define _F49_DISABLE_AMBIENT
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_INNER_LIST]]
// =================================================================================================
#define D_SPOTLIGHT_BUILD_LISTS
#define D_SPOTLIGHT
#define D_SPOTLIGHT_INNER
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_OUTER_LIST]]
// =================================================================================================
#define D_SPOTLIGHT_BUILD_LISTS
#define D_SPOTLIGHT
#define D_SPOTLIGHT_OUTER
#include "LightFragment.shader.h"

[[FS_NULL]]
// =================================================================================================
#define D_NULL
#include "LightFragment.shader.h"

[[FS_RAYMARCH]]
// =================================================================================================
#define D_RAYMARCH
#include "Fullscreen/LightShaftFragment.shader.h"

[[FS_SCATTERING]]
// =================================================================================================
#define D_SCATTERING
#include "Fullscreen/LightShaftFragment.shader.h"

[[FS_SCATTERING_CB]]
// =================================================================================================
#define D_SCATTERING
#define D_CHECKERBOARD
#include "Fullscreen/LightShaftFragment.shader.h"

[[FS_SCATTERING_NOGR]]
// =================================================================================================
#define D_SCATTERING
#define D_NO_GODRAYS
#include "Fullscreen/LightShaftFragment.shader.h"

[[FS_SPOTLIGHT_CONSTANT_VOLUME_OUT]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_VOLUME
#define D_LIGHT_CONSTANT
#define D_LIGHT_OUT
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_CONSTANT_VOLUME_IN]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_VOLUME
#define D_LIGHT_CONSTANT
#define D_LIGHT_IN
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_LINEAR_VOLUME_OUT]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_VOLUME
#define D_LIGHT_LINEAR
#define D_LIGHT_OUT
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_LINEAR_VOLUME_IN]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_VOLUME
#define D_LIGHT_LINEAR
#define D_LIGHT_IN
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_LINEAR_SQRT_VOLUME_OUT]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_VOLUME
#define D_LIGHT_LINEAR_SQRT
#define D_LIGHT_OUT
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_LINEAR_SQRT_VOLUME_IN]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_VOLUME
#define D_LIGHT_LINEAR_SQRT
#define D_LIGHT_IN
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_QUADRATIC_VOLUME_OUT]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_VOLUME
#define D_LIGHT_QUADRATIC
#define D_LIGHT_OUT
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_QUADRATIC_VOLUME_IN]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_VOLUME
#define D_LIGHT_QUADRATIC
#define D_LIGHT_IN
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_CUBIC_VOLUME_OUT]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_VOLUME
#define D_LIGHT_CUBIC
#define D_LIGHT_OUT
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_CUBIC_VOLUME_IN]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_VOLUME
#define D_LIGHT_CUBIC
#define D_LIGHT_IN
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_CUSTOM_VOLUME_OUT]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_VOLUME
#define D_LIGHT_CUSTOM
#define D_LIGHT_OUT
#include "LightFragment.shader.h"

[[FS_SPOTLIGHT_CUSTOM_VOLUME_IN]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_SPOTLIGHT_VOLUME
#define D_LIGHT_CUSTOM
#define D_LIGHT_IN
#include "LightFragment.shader.h"

[[FS_POINTLIGHT_CONSTANT_VOLUME_OUT]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_POINTLIGHT_VOLUME
#define D_LIGHT_CONSTANT
#define D_LIGHT_OUT
#include "LightFragment.shader.h"

[[FS_POINTLIGHT_CONSTANT_VOLUME_IN]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_POINTLIGHT_VOLUME
#define D_LIGHT_CONSTANT
#define D_LIGHT_IN
#include "LightFragment.shader.h"

[[FS_POINTLIGHT_LINEAR_VOLUME_OUT]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_POINTLIGHT_VOLUME
#define D_LIGHT_LINEAR
#define D_LIGHT_OUT
#include "LightFragment.shader.h"

[[FS_POINTLIGHT_LINEAR_VOLUME_IN]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_POINTLIGHT_VOLUME
#define D_LIGHT_LINEAR
#define D_LIGHT_IN
#include "LightFragment.shader.h"

[[FS_POINTLIGHT_LINEAR_SQRT_VOLUME_OUT]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_POINTLIGHT_VOLUME
#define D_LIGHT_LINEAR_SQRT
#define D_LIGHT_OUT
#include "LightFragment.shader.h"

[[FS_POINTLIGHT_LINEAR_SQRT_VOLUME_IN]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_POINTLIGHT_VOLUME
#define D_LIGHT_LINEAR_SQRT
#define D_LIGHT_IN
#include "LightFragment.shader.h"

[[FS_POINTLIGHT_QUADRATIC_VOLUME_OUT]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_POINTLIGHT_VOLUME
#define D_LIGHT_QUADRATIC
#define D_LIGHT_OUT
#include "LightFragment.shader.h"

[[FS_POINTLIGHT_QUADRATIC_VOLUME_IN]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_POINTLIGHT_VOLUME
#define D_LIGHT_QUADRATIC
#define D_LIGHT_IN
#include "LightFragment.shader.h"

[[FS_POINTLIGHT_CUBIC_VOLUME_OUT]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_POINTLIGHT_VOLUME
#define D_LIGHT_CUBIC
#define D_LIGHT_OUT
#include "LightFragment.shader.h"

[[FS_POINTLIGHT_CUBIC_VOLUME_IN]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_POINTLIGHT_VOLUME
#define D_LIGHT_CUBIC
#define D_LIGHT_IN
#include "LightFragment.shader.h"

[[FS_POINTLIGHT_CUSTOM_VOLUME_OUT]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_POINTLIGHT_VOLUME
#define D_LIGHT_CUSTOM
#define D_LIGHT_OUT
#include "LightFragment.shader.h"

[[FS_POINTLIGHT_CUSTOM_VOLUME_IN]]
// =================================================================================================
#define D_SPOTLIGHT
#define D_POINTLIGHT_VOLUME
#define D_LIGHT_CUSTOM
#define D_LIGHT_IN
#include "LightFragment.shader.h"

//TF_BEGIN

[[VS_IMVERTEX_TILE_LIGHTS]]
// =================================================================================================
#define D_TEX_QUAD
#define D_TILED_LIGHTS
#include "ImmediateModeVertex.shader.h"

[[FS_TILE_LIGHTS]]
// =================================================================================================
#define D_TILED_LIGHTS
#include "LightFragment.shader.h"

[[FS_TILE_LIGHTS_COUNT_DEBUG]]
// =================================================================================================
#define D_TILED_LIGHTS
#define D_TILED_LIGHTS_DEBUG
#define D_TILED_LIGHTS_COUNT_DEBUG
#include "LightFragment.shader.h"

[[FS_TILE_LIGHTS_CLUSTER_DEBUG]]
// =================================================================================================
#define D_TILED_LIGHTS
#define D_TILED_LIGHTS_DEBUG
#define D_TILED_LIGHTS_CLUSTER_DEBUG
#include "LightFragment.shader.h"

//TF_END