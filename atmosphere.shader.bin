[[FX]]

sampler gDiffuseMap = sampler_state
{
    Address = Wrap;
    Filter = Trilinear;
    MaxAnisotropy = 8;
    TexUnit = 0;
};

sampler gNormalMap = sampler_state
{
    Address = Wrap;
    Filter = Trilinear;
    MaxAnisotropy = 8;
    TexUnit = 1;
};

sampler gWaterMap = sampler_state
{
    Address = Wrap;
    Filter = Trilinear;
    TexUnit = 2;
};

sampler gCloudMap = sampler_state
{
    Address = Wrap;
    Filter = Trilinear;
    TexUnit = 4;
};

sampler gBufferMap = sampler_state
{
    Address = Clamp;
    TexUnit = 3;
};

sampler gRainbowMap = sampler_state
{
    Address = Clamp;
    TexUnit = 5;
};

sampler gShadowMap = sampler_state
{
    TexUnit = 15;
};

sampler gPerlin3D = sampler_state
{
    DefaultTexture = SHADER/NOISEHALF.DDS;
    TexUnit = 17;
    Address = Wrap;
};

sampler gValueNoiseNorms2D = sampler_state
{
    DefaultTexture = SHADER/VALUENOISE2D.NORMAL.DDS;
    TexUnit = 23;
    Address = Wrap;
};

//TF_BEGIN
sampler gCloudShadowMap = sampler_state
{
	TexUnit = 6;
};

sampler gDualPMapFront = sampler_state
{
	TexUnit = 7;
};

sampler gDualPMapBack = sampler_state
{
	TexUnit = 8;
}; 

sampler gCausticMap = sampler_state
{
	TexUnit = 9;
};

sampler gCausticOffsetMap = sampler_state
{
	TexUnit = 10;
};
//TF_END

float4 gPlanetPositionVec4          = {0.0, -1204.0, 0.0, 1204.0};
float4 gPlanetToViewVec4            = {0.0, 1.0, 0.0, 0.0};
float4 gPlanetToViewNormalVec4      = {0.0, 0.0, 1.0, 0.0};
float4 gPlanetToViewTangentVec4     = {1.0, 0.0, 0.0, 0.0};
float4 gLightOriginVec4             = {0.0, 0.0, 0.0, 0.0};
float4 gLightTopColourVec4          = {0.0, 0.0, 1.0, 1.0}; 

// Lighting
float4 gMaterialColourVec4          = {1.0, 1.0, 1.0, 1.0};
float4 gMaterialParamsVec4          = {0.9, 0.5, 0.0, 0.5};

// Fog
float4 gSkyColourVec4                   = {1.0, 0.0, 1.0, 0.0};
float4 gSkyUpperColourVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gSkySolarColourVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gSkyGradientSpeedVec4            = {1.0, 0.0, 1.0, 0.0};
float4 gSkyUpperParamsVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gHorizonColourVec4               = {1.0, 0.0, 1.0, 0.0};
float4 gSunColourVec4                   = {1.0, 0.0, 1.0, 0.0};
float4 gWaterFogColourNearVec4          = { 1.0, 0.0, 1.0, 0.0 };
float4 gWaterFogColourFarVec4           = { 1.0, 0.0, 1.0, 0.0 };
float4 gWaterFogVec4                    = {1.0, 0.0, 1.0, 0.0};
float4 gFogColourVec4                   = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceHorizonColourVec4          = {1.0, 0.0, 1.0, 0.0};
float4 gHeightFogColourVec4             = {1.0, 0.0, 1.0, 0.0};
float4 gHeightFogParamsVec4             = {1.0, 0.0, 1.0, 0.0};
float4 gFogParamsVec4                   = {1.0, 0.0, 1.0, 0.0};
float4 gScatteringParamsVec4            = {1.0, 0.0, 1.0, 0.0};
float4 gFogFadeHeightsVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceSkyColour1Vec4             = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceSkyColour2Vec4             = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceSkyColour3Vec4             = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceSkyColourVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gSunPositionVec4                 = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceScatteringParamsVec4       = {1.0, 0.0, 1.0, 0.0};
float4 gTerrainDistancesVec4            = {0.0, 0.0, 0.0, 0.0};
float4 gaPlanetPositionsVec4;

// Rings
float4 gRingParamsVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gRingParams2Vec4             = {1.0, 0.0, 1.0, 0.0};
float4 gRingAvoidanceSphere         = {0.0, 0.0, 0.0, 0.0};
float4 gRingColour1Vec4             = {1.0, 0.0, 1.0, 0.0};
float4 gRingColour2Vec4             = {1.0, 0.0, 1.0, 0.0};

float4 gRainbowParamsVec4           = {1.0, 0.0, 1.0, 0.0};

// Planet Clouds
float4 gPlanetCloudParamsVec4       = {1.0, 0.0, 1.0, 0.0};
float4 gPlanetCloudParams2Vec4      = {1.0, 0.0, 1.0, 0.0};

// Planet texture
float4 gTileBlendScalesVec4         = {8.0, 0.5, 2.0, 2.0};
float4 gaAverageColoursVec4;
float4 gaTerrainColoursVec4;
float4 gaSpecularValuesVec4;

//TF_BEGIN
float4 gMaterialSFXVec4;
float4 gMaterialSFXColVec4;
float4 gRainParametersVec4 = { 0.0, 0.0, 0.0, 0.0 };
//TF_END

context SCATTERING
{
    VertexShader = compile GLSL VS_GENERAL;
    PixelShader = compile GLSL FS_SCATTERING; 
}

context SCATTER_MASK
{
    VertexShader    = compile GLSL VS_GENERAL;
    PixelShader     = compile GLSL FS_SCATTER_MASK;
}

context [ PC ] SCATTER_MASK_CB
{
    VertexShader    = compile GLSL VS_GENERAL_CB;
    PixelShader     = compile GLSL FS_SCATTER_MASK_CB;

    ShadingRate     = true;
}

context [ SWITCH ] SCATTER_MASK_CB
{
    VertexShader    = compile GLSL VS_GENERAL_CB;
    PixelShader     = compile GLSL FS_SCATTER_MASK_CB;

    ShadingRate     = true;
}

context CLOUDSHADOW
{
    VertexShader = compile GLSL VS_CLOUDSHADOW;
    PixelShader = compile GLSL FS_CLOUDSHADOW; 
}

context CLOUD
{
    VertexShader = compile GLSL VS_CLOUD;
    PixelShader = compile GLSL FS_CLOUD; 
}

context REFLECT
{
    VertexShader = compile GLSL VS_REFLECT;
    PixelShader = compile GLSL FS_REFLECT; 
}

context REFLECT_WATER
{
    VertexShader = compile GLSL VS_GENERAL;
    PixelShader = compile GLSL FS_REFLECT_WATER;
}

context RINGS
{
	VertexShader = compile GLSL VS_RINGS;
	PixelShader = compile GLSL FS_RINGS; 
}

context RAINBOW
{
	VertexShader = compile GLSL VS_RAINBOW;
	PixelShader  = compile GLSL FS_RAINBOW; 
}

context PLANET
{
    VertexShader = compile GLSL VS_PLANET;
    PixelShader  = compile GLSL FS_PLANET; 
}

context PLANET_LINDEP
{
    VertexShader = compile GLSL VS_PLANET;
    PixelShader = compile GLSL FS_PLANET_LINDEP;
}


context PLANET_NEAR
{
    VertexShader = compile GLSL VS_PLANET_NEAR;
    PixelShader  = compile GLSL FS_PLANET; 
}

//TF_BEGIN
context [ MACOS ] SCATTERING_FORWARD
{
	VertexShader = compile GLSL VS_SCATTERING_FORWARD;
	PixelShader = compile GLSL FS_SCATTERING_FORWARD;
}

context [ IOS ] SCATTERING_FORWARD
{
    VertexShader = compile GLSL VS_SCATTERING_FORWARD;
    PixelShader = compile GLSL FS_SCATTERING_FORWARD;
}

context [ MACOS ] RINGS_FORWARD
{
	VertexShader = compile GLSL VS_RINGS_FORWARD;
	PixelShader = compile GLSL FS_RINGS_FORWARD;
}

context [ IOS ] RINGS_FORWARD
{
    VertexShader = compile GLSL VS_RINGS_FORWARD;
    PixelShader = compile GLSL FS_RINGS_FORWARD;
}

context [ MACOS ] PLANET_FRWD
{
	VertexShader = compile GLSL VS_PLANET_FRWD;
	PixelShader = compile GLSL FS_PLANET_FRWD;
}

context [ IOS ] PLANET_FRWD
{
    VertexShader = compile GLSL VS_PLANET_FRWD;
    PixelShader = compile GLSL FS_PLANET_FRWD;
}

context [ MACOS ] PLANET_NEAR_FRWD
{
	VertexShader = compile GLSL VS_PLANET_NEAR_FRWD;
	PixelShader = compile GLSL FS_PLANET_FRWD;
}

context [ IOS ] PLANET_NEAR_FRWD
{
    VertexShader = compile GLSL VS_PLANET_NEAR_FRWD;
    PixelShader = compile GLSL FS_PLANET_FRWD;
}

[[VS_PLANET_FRWD]]
// =================================================================================================
#define D_FORWARD_RENDERER
#define D_ATMOSPHERE
#define D_PLANET
#include "Custom/AtmosphereVertex.shader.h"

[[VS_PLANET_NEAR_FRWD]]
// =================================================================================================
#define D_FORWARD_RENDERER
#define D_ATMOSPHERE
#define D_PLANET
#define D_PLANET_NEAR
#include "Custom/AtmosphereVertex.shader.h"

[[VS_SCATTERING_FORWARD]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_SCATTERING_FORWARD
#include "Custom/AtmosphereVertex.shader.h"

[[VS_RINGS_FORWARD]]
// =================================================================================================
#define D_RINGS
#define D_RINGS_FORWARD
#include "Custom/AtmosphereVertex.shader.h"

[[FS_PLANET_FRWD]]
// =================================================================================================
#define D_FORWARD_RENDERER
#define D_PLANET
#define D_ATMOSPHERE
#include "Custom/PlanetFragment.shader.h"

[[FS_SCATTERING_FORWARD]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_SCATTERING_FORWARD
#define D_SCATTERING
#include "Custom/AtmosphereFragment.shader.h"

[[FS_RINGS_FORWARD]]
// =================================================================================================
#define D_RINGS
#define D_RINGS_FORWARD
#include "Custom/RingsFragment.shader.h"
//TF_END

[[VS_REFLECT]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_REFLECT
#include "Custom/AtmosphereVertex.shader.h"

[[VS_GENERAL]]
// =================================================================================================
#define D_ATMOSPHERE
#include "Custom/AtmosphereVertex.shader.h"

[[VS_GENERAL_CB]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_CHECKERBOARD
#include "Custom/AtmosphereVertex.shader.h"

[[VS_PLANET]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_PLANET
#include "Custom/AtmosphereVertex.shader.h"

[[VS_PLANET_NEAR]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_PLANET
#define D_PLANET_NEAR
#include "Custom/AtmosphereVertex.shader.h"

[[VS_CLOUD]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_CLOUD
#include "Custom/AtmosphereVertex.shader.h"

[[VS_CLOUDSHADOW]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_CLOUD
#define D_ATMOSPHERE_SHADOW
#include "Custom/AtmosphereVertex.shader.h"

[[VS_RINGS]]
// =================================================================================================
#define D_RINGS
#include "Custom/AtmosphereVertex.shader.h"

[[VS_RAINBOW]]
// =================================================================================================
#define D_RAINBOW
#include "Custom/AtmosphereVertex.shader.h"

[[FS_SCATTERING]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_SCATTERING
#define D_REGULAR_SCATTERING
#include "Custom/AtmosphereFragment.shader.h"

[[FS_REFLECT_WATER]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_SCATTERING
#define D_REFLECT_WATER
#include "Custom/AtmosphereFragment.shader.h"

[[FS_SCATTER_MASK]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_SCATTERING
#define D_SCATTER_MASK
#include "Custom/AtmosphereFragment.shader.h"

[[FS_SCATTER_MASK_CB]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_SCATTERING
#define D_SCATTER_MASK
#define D_CHECKERBOARD
#include "Custom/AtmosphereFragment.shader.h"

[[FS_CLOUD]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_CLOUD
#include "Custom/AtmosphereFragment.shader.h"

[[FS_CLOUDSHADOW]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_CLOUD
#define D_ATMOSPHERE_SHADOW
#include "Custom/AtmosphereFragment.shader.h"

[[FS_REFLECT]]
// =================================================================================================
#define D_ATMOSPHERE
#define D_SCATTERING
#define D_REFLECT
#include "Custom/AtmosphereFragment.shader.h"

[[FS_RINGS]]
// =================================================================================================
#define D_RINGS
#include "Custom/RingsFragment.shader.h"

[[FS_RAINBOW]]
// =================================================================================================
#define D_RAINBOW
#include "Custom/RainbowFragment.shader.h"

[[FS_PLANET]]
// =================================================================================================
#define D_PLANET
#define D_ATMOSPHERE
#define D_ATTRIBUTES
#include "Custom/PlanetFragment.shader.h"

[[FS_PLANET_LINDEP]]
// =================================================================================================
#define D_PLANET
#define D_ATMOSPHERE
#define D_ATTRIBUTES
#define D_OUTPUT_LINEARDEPTH
#include "Custom/PlanetFragment.shader.h"